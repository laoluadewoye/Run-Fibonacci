from os import environ
from os.path import exists
from enum import StrEnum, auto
from time import time
from base64 import b64encode
from json import dumps
from hashlib import sha256


SERVER_API: str = environ.get('SERVER_API')
SERVER_DATASTORE: str = environ.get('SERVER_DATASTORE')
DATASTORE_ADDRESS: str = environ.get('DATASTORE_ADDRESS')
DATASTORE_PORT: str = environ.get('DATASTORE_PORT')


class APIType(StrEnum):
    REST = auto()
    GRPC = auto()
    SOAP = auto()
    GRAPHQL = auto()
    MQTT = auto()


class DatastoreType(StrEnum):
    DSNONE = 'none'
    DSFILE = 'file'
    ELASTICSTACK = auto()
    MONGODB = auto()
    POSTGRESQL = auto()


class LogType(StrEnum):
    SEND = auto()
    RECEIVE = auto()
    OPERATION = auto()


class LogKind(StrEnum):
    # Events
    ONSTART = auto()
    ONCALL = auto()

    # Methods
    TRIGGERSEND = auto()
    PROCESS = auto()
    HEALTHCHECK = auto()
    START = auto()


def create_log(log_type: LogType, log_kind: list[LogKind], server_config: dict, details: str) -> dict:
    # Create log
    new_log: dict = {
        'type': log_type.value,
        'kind': ';'.join([lk.value for lk in log_kind]),
        'time': str(time()),
        'config': b64encode(dumps(server_config).encode()).decode(),
        'details': details.encode()
    }

    # Hash the contents of the log and return
    new_log['hash'] = sha256(dumps(new_log).encode()).hexdigest()
    return new_log

def send_log(cur_log: dict):
    global SERVER_DATASTORE
    global SERVER_API

    if SERVER_DATASTORE == DatastoreType.DSNONE.value:  # Save to local temp CSV
        if not exists('/tmp/datastore.csv'):
            with open('/tmp/datastore.csv', 'w') as ds_file:
                ds_file.write(','.join(cur_log.keys()) + '\n')
                ds_file.write(','.join(cur_log.values()) + '\n')
        else:
            with open('/tmp/datastore.csv', 'a') as ds_file:
                ds_file.write(','.join(cur_log.values()) + '\n')
    elif SERVER_DATASTORE == DatastoreType.DSFILE.value:  # Send to remote CSV
        pass
    elif SERVER_DATASTORE == DatastoreType.ELASTICSTACK.value:  # Send to remote elasticstack
        pass
    elif SERVER_DATASTORE == DatastoreType.MONGODB.value:  # Send to remote MongoDB
        pass
    elif SERVER_DATASTORE == DatastoreType.POSTGRESQL.value:  # Send to remote PostgreSQL
        pass
    else:  # Error out
        pass


def save_log(log_type: LogType, log_kind: list[LogKind], server_config: dict, details: str) -> None:
    # Send details to output
    print(details, flush=True)

    # Create log
    new_log = create_log(log_type, log_kind, server_config, details)

    # Send log to datastore
    send_log(new_log)

'''
Type of logs

1) Sends - Logs that are sent out by the server
2) Receives - Logs that are retrieved by the server
3) Operations - Logs that are generated by the server

Kinds of logs

1) OnStart - Logs that are created when the server is first started
2) OnCall - Logs that are created when the server API is called

Log fields

* ID - Incrementing number autogenerated by whatever datastore is used
* Hash - The Hash of the log in SHA256
* Type - The type of log
* Kind - The kind(s) of log
* Time - The timestamp the log was recorded in UNIX epoch seconds
* Config - The configuration of the server in base 64
* Details - The details of the log in base 64
'''
